// Generated by Haxe 4.0.0
(function ($hx_exports) { "use strict";
var BackgroundPane = $hx_exports["BackgroundPane"] = function() { };
BackgroundPane.activate = function(savedState) {
	BackgroundPane.view = new BackgroundPaneView();
};
BackgroundPane.deactivate = function() {
	BackgroundPane.view.destroy();
};
BackgroundPane.consumeContentProvider = function(provider) {
	BackgroundPane.view.provider = provider;
};
var BackgroundPaneView = function() {
	var _gthis = this;
	this.element = window.document.createElement("div");
	this.element.classList.add("background-pane");
	this.attached = false;
	this.disposables = new atom_CompositeDisposable();
	this.disposables.add(atom.workspace.onDidAddPane($bind(this,this.updateVisibility)));
	this.disposables.add(atom.workspace.onDidDestroyPane($bind(this,this.updateVisibility)));
	this.disposables.add(atom.workspace.onDidChangeActivePaneItem($bind(this,this.updateVisibility)));
	haxe_Timer.delay(function() {
		if(atom.workspace.getActivePaneItem() == null) {
			_gthis.attach();
			if(_gthis.provider != null) {
				var html = _gthis.provider.get();
				if(html != null) {
					_gthis.element.innerHTML = html;
				} else {
					_gthis.element.innerHTML = "";
				}
			}
		}
	},1000);
};
BackgroundPaneView.prototype = {
	destroy: function() {
		this.disposables.dispose();
	}
	,attach: function() {
		if(!this.attached) {
			atom.views.getView(atom.workspace.getActivePane()).appendChild(this.element);
			this.attached = true;
		}
	}
	,detach: function() {
		if(this.attached) {
			this.element.innerHTML = "";
			this.attached = false;
		}
	}
	,updateVisibility: function(_) {
		var activePaneItem = atom.workspace.getActivePane();
		if(this.provider == null || activePaneItem == null) {
			this.detach();
			return;
		}
		var shouldAttach = atom.workspace.getActivePaneItem() == null;
		if(this.attached) {
			if(!shouldAttach) {
				this.detach();
			}
		} else if(shouldAttach) {
			this.attach();
		}
		if(this.attached) {
			if(this.provider != null) {
				var html = this.provider.get();
				if(html != null) {
					this.element.innerHTML = html;
				} else {
					this.element.innerHTML = "";
				}
			}
		}
	}
};
var atom_CompositeDisposable = require("atom").CompositeDisposable;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
module.exports = BackgroundPane;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);

//# sourceMappingURL=background-pane.js.map